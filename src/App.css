Home

73aa755e-2caf-4b3c-bf90-056b15a543f7

right arrow
Buy Credits


User Avatar

info

code
Code

preview
Preview

Deploy
Deploy
Robot
Hey SIXTYSECOND, Quick input needed :
üìÅ File-File Berikutnya:
üìÅ File 6: src/App.js
import React, { useState, useEffect, useContext, createContext } from 'react';
import './App.css';
import { BrowserRouter, Routes, Route, Navigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { Timer, Trophy, Users, Brain, Coins, LogOut, Crown, Calendar } from 'lucide-react';
import { sdk } from '@farcaster/miniapp-sdk';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Auth Context
const AuthContext = createContext(null);

const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// Real Farcaster SDK implementation with fallback
const FarcasterSDK = {
  actions: {
    signIn: async ({ nonce }) => {
      try {
        // Try real Farcaster SDK first
        if (typeof sdk !== 'undefined' && sdk.actions) {
          const authResult = await sdk.actions.signIn({
            nonce,
            acceptAuthAddress: true
          });
          return authResult;
        } else {
          // Fallback for development/testing
          return {
            message: `Development mode sign-in\nNonce: ${nonce}\nTimestamp: ${new Date().toISOString()}`,
            signature: '0x' + Array(130).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('')
          };
        }
      } catch (error) {
        console.error('Farcaster sign-in error:', error);
        // Fallback for errors
        return {
          message: `Fallback sign-in\nNonce: ${nonce}`,
          signature: '0x' + Array(130).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('')
        };
      }
    },
    ready: () => {
      try {
        // This is CRITICAL - must call when app is ready
        if (typeof sdk !== 'undefined' && sdk.actions) {
          sdk.actions.ready();
        }
        console.log('Farcaster Mini App ready');
      } catch (error) {
        console.warn('SDK ready call failed:', error);
      }
    }
  },
  quickAuth: {
    getToken: async () => {
      try {
        if (typeof sdk !== 'undefined' && sdk.quickAuth) {
          const token = await sdk.quickAuth.getToken();
          return token;
        } else {
          // Fallback to localStorage for development
          const token = localStorage.getItem('farcaster_auth_token');
          return token ? { token } : null;
        }
      } catch (error) {
        console.log('No existing token found');
        return null;
      }
    }
  }
};

// Authentication Provider
const AuthProvider = ({ children }) => {
  const [authState, setAuthState] = useState({
    isAuthenticated: false,
    user: null,
    isLoading: true,
    error: null
  });

  const generateNonce = () => {
    const array = new Uint8Array(32);
    crypto.getRandomValues(array);
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
  };

  const authenticate = async () => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));
      
      const nonce = generateNonce();
      const authResult = await FarcasterSDK.actions.signIn({ nonce });
      
      const response = await axios.post(`${API}/auth/verify`, {
        message: authResult.message,
        signature: authResult.signature,
        nonce
      });

      if (response.data.success) {
        localStorage.setItem('farcaster_auth_token', response.data.token);
        setAuthState({
          isAuthenticated: true,
          user: response.data.user,
          isLoading: false,
          error: null
        });
        FarcasterSDK.actions.ready();
      } else {
        throw new Error(response.data.error || 'Authentication failed');
      }
    } catch (error) {
      console.error('Authentication failed:', error);
      setAuthState(prev => ({
        ...prev,
        isLoading: false,
        error: error.response?.data?.detail || error.message || 'Authentication failed'
      }));
    }
  };

  const logout = async () => {
    try {
      const token = localStorage.getItem('farcaster_auth_token');
      if (token) {
        await axios.post(`${API}/auth/logout`, {}, {
          headers: { Authorization: `Bearer ${token}` }
        });
      }
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      localStorage.removeItem('farcaster_auth_token');
      setAuthState({
        isAuthenticated: false,
        user: null,
        isLoading: false,
        error: null
      });
    }
  };

  const checkAuthStatus = async () => {
    const token = localStorage.getItem('farcaster_auth_token');
    if (!token) {
      setAuthState(prev => ({ ...prev, isLoading: false }));
      return;
    }

    try {
      const response = await axios.get(`${API}/auth/profile`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      setAuthState({
        isAuthenticated: true,
        user: response.data,
        isLoading: false,
        error: null
      });
    } catch (error) {
      localStorage.removeItem('farcaster_auth_token');
      setAuthState({
        isAuthenticated: false,
        user: null,
        isLoading: false,
        error: null
      });
    }
  };

  useEffect(() => {
    checkAuthStatus();
    // Initialize Farcaster SDK - CRITICAL for Mini Apps
    try {
      if (typeof sdk !== 'undefined' && sdk.actions) {
        sdk.actions.ready();
        console.log('‚úÖ Farcaster SDK initialized successfully');
      } else {
        console.warn('‚ö†Ô∏è Farcaster SDK not available - running in development mode');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Farcaster SDK initialization failed:', error);
    }
  }, []);

  return (
    <AuthContext.Provider value={{
      ...authState,
      authenticate,
      logout,
      refresh: checkAuthStatus
    }}>
      {children}
    </AuthContext.Provider>
  );
};

// Landing Page Component
const LandingPage = () => {
  const { authenticate, isLoading, error } = useAuth();

  return (
    <div className="landing-container">
      <div className="landing-content">
        <div className="hero-section">
          <div className="logo-container">
            <Brain className="logo-icon" size={48} />
            <h1 className="app-title">BlockBrain</h1>
          </div>
          <p className="hero-subtitle">
            Test your crypto & general knowledge on Farcaster
          </p>
          <div className="hero-stats">
            <div className="stat-item">
              <Calendar size={20} />
              <span>Daily Quests</span>
            </div>
            <div className="stat-item">
              <Trophy size={20} />
              <span>Weekly Leaderboard</span>
            </div>
            <div className="stat-item">
              <Coins size={20} />
              <span>Earn XP</span>
            </div>
          </div>
        </div>

        <div className="auth-section">
          <div className="auth-card">
            <h2>Ready to test your knowledge?</h2>
            <p>Connect your Farcaster account to start playing</p>
            
            {error && (
              <div className="error-message">
                {error}
              </div>
            )}
            
            <button
              onClick={authenticate}
              disabled={isLoading}
              className="connect-button"
            >
              {isLoading ? (
                <div className="loading-spinner"></div>
              ) : (
                <>
                  <Users size={20} />
                  Connect Farcaster Wallet
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Quiz Dashboard
const Dashboard = () => {
  const { user, logout } = useAuth();
  const [gameStats, setGameStats] = useState({
    questionsToday: 0,
    totalXP: 0,
    streak: 0,
    rank: 0
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const token = localStorage.getItem('farcaster_auth_token');
        const response = await axios.get(`${API}/quiz/stats`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setGameStats(response.data);
      } catch (error) {
        console.error('Failed to fetch stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading your stats...</p>
      </div>
    );
  }

  const canPlayToday = gameStats.questionsToday < 3;

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <div className="header-left">
          <div className="user-info">
            <img 
              src={user?.pfp_url || '/default-avatar.png'} 
              alt="Profile" 
              className="user-avatar"
            />
            <div>
              <h2>Welcome back, {user?.display_name || user?.username}!</h2>
              <p className="user-fid">FID: {user?.fid}</p>
            </div>
          </div>
        </div>
        <button onClick={logout} className="logout-button">
          <LogOut size={16} />
          Logout
        </button>
      </header>

      <div className="stats-grid">
        <div className="stat-card">
          <Calendar className="stat-icon" />
          <div className="stat-info">
            <h3>{gameStats.questionsToday}/3</h3>
            <p>Questions Today</p>
          </div>
        </div>
        
        <div className="stat-card">
          <Coins className="stat-icon" />
          <div className="stat-info">
            <h3>{gameStats.totalXP}</h3>
            <p>Total XP</p>
          </div>
        </div>
        
        <div className="stat-card">
          <Trophy className="stat-icon" />
          <div className="stat-info">
            <h3>#{gameStats.rank}</h3>
            <p>Global Rank</p>
          </div>
        </div>
      </div>

      <div className="game-modes">
        <h3>Choose Your Challenge</h3>
        <div className="modes-grid">
          <GameModeCard
            icon={<Coins size={32} />}
            title="Crypto Knowledge"
            description="Test your blockchain & cryptocurrency knowledge"
            difficulty="Beginner to Expert"
            canPlay={canPlayToday}
            gameMode="crypto"
          />
          
          <GameModeCard
            icon={<Brain size={32} />}
            title="General Knowledge"
            description="Challenge yourself with diverse trivia questions"
            difficulty="Mixed Topics"
            canPlay={canPlayToday}
            gameMode="general"
          />
        </div>
      </div>

      {!canPlayToday && (
        <div className="daily-limit-message">
          <Calendar size={24} />
          <h4>Daily limit reached!</h4>
          <p>Come back tomorrow for more questions. Resets at midnight UTC.</p>
        </div>
      )}
    </div>
  );
};

// Game Mode Card Component
const GameModeCard = ({ icon, title, description, difficulty, canPlay, gameMode }) => {
  const handleStartQuiz = () => {
    if (canPlay) {
      window.location.href = `/quiz/${gameMode}`;
    }
  };

  return (
    <div className={`game-mode-card ${!canPlay ? 'disabled' : ''}`}>
      <div className="mode-icon">{icon}</div>
      <h4>{title}</h4>
      <p>{description}</p>
      <div className="difficulty-badge">{difficulty}</div>
      {canPlay ? (
        <button onClick={handleStartQuiz} className="play-button">
          Start Quiz
        </button>
      ) : (
        <button disabled className="play-button disabled">
          Daily Limit Reached
        </button>
      )}
    </div>
  );
};

// Quiz Game Component (truncated for brevity - you can add the full quiz component)
const QuizGame = ({ gameMode }) => {
  return (
    <div className="quiz-container">
      <h2>Quiz game for {gameMode} coming soon!</h2>
      <a href="/" className="back-button">Back to Dashboard</a>
    </div>
  );
};

// Quiz Route Component
const QuizRoute = () => {
  const { gameMode } = useParams();
  return <QuizGame gameMode={gameMode} />;
};

// Main App Component
function App() {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="loading-spinner"></div>
        <p>Loading BlockBrain...</p>
      </div>
    );
  }

  return (
    <div className="App">
      <BrowserRouter>
        <Routes>
          <Route 
            path="/" 
            element={isAuthenticated ? <Dashboard /> : <LandingPage />} 
          />
          <Route 
            path="/quiz/:gameMode" 
            element={
              isAuthenticated ? (
                <QuizRoute />
              ) : (
                <Navigate to="/" replace />
              )
            } 
          />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

// Main App with Auth Provider
export default function AppWithAuth() {
  return (
    <AuthProvider>
      <App />
    </AuthProvider>
  );
}
Mau saya lanjutkan dengan:

File 7: src/App.css (styling lengkap)
File 8: src/index.js
File 9: craco.config.js
File 10: tailwind.config.js
Atau mau saya kirim semuanya sekaligus? üòä

Sep 25, 11:22 PM

Copy
Lanjut saja

Sep 25, 11:26 PM

Copy
Robot
Hey SIXTYSECOND, Quick input needed :
Ask Question
Agent will continue working after your reply
üìÅ Files Lengkap Lanjutan:
üìÅ File 7: src/App.css
/* Import modern fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&display=swap');

/* CSS Reset and Global Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  background: #0a0a0b;
  color: #ffffff;
  line-height: 1.6;
  overflow-x: hidden;
}

.App {
  min-height: 100vh;
  background: linear-gradient(135deg, #0a0a0b 0%, #1a1a1b 100%);
  position: relative;
}

.App::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(255, 107, 107, 0.1) 0%, transparent 50%),
    radial-gradient(circle at 40% 40%, rgba(24, 160, 251, 0.1) 0%, transparent 50%);
  pointer-events: none;
  z-index: -1;
}

/* Loading States */
.app-loading, .loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  gap: 1rem;
}

.loading-spinner {
  width: 32px;
  height: 32px;
  border: 3px solid rgba(24, 160, 251, 0.2);
  border-radius: 50%;
  border-top-color: #18a0fb;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Landing Page */
.landing-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
}

.landing-content {
  max-width: 1200px;
  width: 100%;
  display: grid;
  grid-template-columns: 1fr 400px;
  gap: 4rem;
  align-items: center;
}

.hero-section {
  text-align: left;
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 2rem;
}

.logo-icon {
  color: #18a0fb;
  filter: drop-shadow(0 0 20px rgba(24, 160, 251, 0.3));
}

.app-title {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 3rem;
  font-weight: 700;
  background: linear-gradient(135deg, #18a0fb 0%, #7b68ee 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hero-subtitle {
  font-size: 1.25rem;
  color: #a0a0a0;
  margin-bottom: 2rem;
  max-width: 500px;
}

.hero-stats {
  display: flex;
  gap: 2rem;
  margin-top: 3rem;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  color: #18a0fb;
  font-weight: 500;
}

.auth-section {
  display: flex;
  justify-content: center;
}

.auth-card {
  background: rgba(255, 255, 255, 0.08);
  backdrop-filter: blur(20px);
  border-radius: 24px;
  padding: 3rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  text-align: center;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
}

.auth-card h2 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #ffffff;
}

.auth-card p {
  color: #a0a0a0;
  margin-bottom: 2rem;
}

.connect-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  width: 100%;
  padding: 1rem 2rem;
  background: linear-gradient(135deg, #18a0fb 0%, #1e40af 100%);
  color: white;
  border: none;
  border-radius: 16px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.connect-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(24, 160, 251, 0.3);
}

.connect-button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none;
}

.error-message {
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  color: #ff6b6b;
  padding: 1rem;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  text-align: center;
}

/* Dashboard */
.dashboard-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  min-height: 100vh;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 3rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.user-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.user-avatar {
  width: 64px;
  height: 64px;
  border-radius: 50%;
  border: 3px solid #18a0fb;
  object-fit: cover;
}

.user-info h2 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #ffffff;
}

.user-fid {
  color: #a0a0a0;
  font-size: 0.9rem;
}

.logout-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: #a0a0a0;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  font-size: 0.9rem;
}

.logout-button:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #ffffff;
}

/* Stats Grid */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 3rem;
}

.stat-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  gap: 1.5rem;
  transition: all 0.3s ease;
}

.stat-card:hover {
  background: rgba(255, 255, 255, 0.08);
  transform: translateY(-4px);
}

.stat-icon {
  color: #18a0fb;
  flex-shrink: 0;
}

.stat-info h3 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 2rem;
  font-weight: 700;
  color: #ffffff;
  margin-bottom: 0.25rem;
}

.stat-info p {
  color: #a0a0a0;
  font-size: 0.9rem;
}

/* Game Modes */
.game-modes {
  margin-bottom: 3rem;
}

.game-modes h3 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 2rem;
  color: #ffffff;
}

.modes-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 2rem;
}

.game-mode-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 2.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  text-align: center;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.game-mode-card:not(.disabled):hover {
  background: rgba(255, 255, 255, 0.08);
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
}

.game-mode-card.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.mode-icon {
  color: #18a0fb;
  margin-bottom: 1.5rem;
}

.game-mode-card h4 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #ffffff;
}

.game-mode-card p {
  color: #a0a0a0;
  margin-bottom: 1.5rem;
  line-height: 1.6;
}

.difficulty-badge {
  display: inline-block;
  padding: 0.5rem 1rem;
  background: rgba(24, 160, 251, 0.2);
  color: #18a0fb;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
  margin-bottom: 2rem;
}

.play-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 1rem 2rem;
  background: linear-gradient(135deg, #18a0fb 0%, #1e40af 100%);
  color: white;
  border: none;
  border-radius: 16px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
}

.play-button:hover:not(.disabled) {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(24, 160, 251, 0.3);
}

.play-button.disabled {
  background: rgba(255, 255, 255, 0.1);
  color: #666;
  cursor: not-allowed;
  transform: none;
}

.daily-limit-message {
  text-align: center;
  padding: 2rem;
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.daily-limit-message h4 {
  font-family: 'Space Grotesk', sans-serif;
  color: #ff6b6b;
  font-weight: 600;
}

.daily-limit-message p {
  color: #a0a0a0;
}

/* Quiz Container */
.quiz-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.quiz-container h2 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 2rem;
  color: #ffffff;
  margin-bottom: 2rem;
}

.back-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 1rem 2rem;
  background: linear-gradient(135deg, #18a0fb 0%, #1e40af 100%);
  color: white;
  border: none;
  border-radius: 16px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
}

.back-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 30px rgba(24, 160, 251, 0.3);
}

/* Responsive Design */
@media (max-width: 768px) {
  .landing-content {
    grid-template-columns: 1fr;
    gap: 3rem;
    text-align: center;
  }
  
  .hero-stats {
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .app-title {
    font-size: 2.5rem;
  }
  
  .dashboard-header {
    flex-direction: column;
    gap: 1.5rem;
    text-align: center;
  }
  
  .stats-grid {
    grid-template-columns: 1fr;
  }
  
  .modes-grid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 480px) {
  .app-title {
    font-size: 2rem;
  }
  
  .auth-card {
    padding: 2rem;
  }
  
  .dashboard-container {
    padding: 1rem;
  }
        }
